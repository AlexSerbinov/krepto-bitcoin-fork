name: Build Krepto Windows GUI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: false
        default: 'latest'
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/build-windows-gui.yml'

jobs:
  build-windows-gui:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Qt5
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtbase qttools'
        cache: true
    
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.3
      with:
        vs-version: '16.11'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        # Install vcpkg for dependencies
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg.exe integrate install
        
        # Install required packages
        .\vcpkg\vcpkg.exe install boost:x64-windows
        .\vcpkg\vcpkg.exe install libevent:x64-windows
        .\vcpkg\vcpkg.exe install openssl:x64-windows
        .\vcpkg\vcpkg.exe install berkeleydb:x64-windows
      shell: cmd
    
    - name: Configure build environment
      run: |
        # Set environment variables
        echo "QTDIR=$env:Qt5_DIR" >> $env:GITHUB_ENV
        echo "CMAKE_PREFIX_PATH=$env:Qt5_DIR" >> $env:GITHUB_ENV
        echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $env:GITHUB_ENV
      shell: powershell
    
    - name: Generate build files
      run: |
        # Create build directory
        mkdir build
        cd build
        
        # Configure with CMake
        cmake .. `
          -G "Visual Studio 16 2019" `
          -A x64 `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_GUI=ON `
          -DBUILD_TESTS=OFF `
          -DBUILD_BENCH=OFF `
          -DWITH_WALLET=ON `
          -DWITH_ZMQ=OFF `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" `
          -DQt5_DIR="$env:Qt5_DIR\lib\cmake\Qt5" `
          -DCMAKE_PREFIX_PATH="$env:Qt5_DIR"
      shell: powershell
    
    - name: Build Bitcoin Qt GUI
      run: |
        cd build
        cmake --build . --config Release --parallel 4
      shell: powershell
    
    - name: Package Windows GUI
      run: |
        # Create output directory
        mkdir output
        
        # Copy executables with proper naming
        if (Test-Path "build\src\Release\bitcoin-qt.exe") {
          Copy-Item "build\src\Release\bitcoin-qt.exe" "output\krepto-qt.exe"
          Write-Host "✅ krepto-qt.exe created"
        }
        
        if (Test-Path "build\src\Release\bitcoind.exe") {
          Copy-Item "build\src\Release\bitcoind.exe" "output\kryptod.exe"
          Write-Host "✅ kryptod.exe created"
        }
        
        if (Test-Path "build\src\Release\bitcoin-cli.exe") {
          Copy-Item "build\src\Release\bitcoin-cli.exe" "output\krepto-cli.exe"
          Write-Host "✅ krepto-cli.exe created"
        }
        
        # Copy additional tools
        $tools = @("bitcoin-tx", "bitcoin-util", "bitcoin-wallet")
        foreach ($tool in $tools) {
          $sourcePath = "build\src\Release\$tool.exe"
          $targetName = $tool -replace "bitcoin-", "krepto-"
          if (Test-Path $sourcePath) {
            Copy-Item $sourcePath "output\$targetName.exe"
            Write-Host "✅ $targetName.exe created"
          }
        }
        
        # Copy Qt5 DLLs
        $qtDlls = @("Qt5Core.dll", "Qt5Gui.dll", "Qt5Widgets.dll", "Qt5Network.dll")
        foreach ($dll in $qtDlls) {
          $sourceDll = "$env:Qt5_DIR\bin\$dll"
          if (Test-Path $sourceDll) {
            Copy-Item $sourceDll "output\"
            Write-Host "✅ $dll copied"
          }
        }
        
        # Copy Qt5 plugins
        mkdir "output\platforms"
        Copy-Item "$env:Qt5_DIR\plugins\platforms\qwindows.dll" "output\platforms\"
        
        # Copy Visual C++ runtime
        $vcRedist = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Redist\MSVC\14.29.30133\x64\Microsoft.VC142.CRT"
        if (Test-Path $vcRedist) {
          Copy-Item "$vcRedist\*.dll" "output\"
        }
        
        # Create configuration file
        $configContent = @"
# Krepto Configuration File
# Network settings
port=12345
rpcport=12347

# Seed nodes
addnode=164.68.117.90:12345
addnode=5.189.133.204:12345

# Basic settings
server=1
daemon=1
txindex=1

# RPC settings
rpcuser=kreptouser
rpcpassword=kreptopass123
rpcallowip=127.0.0.1
"@
        $configContent | Out-File -FilePath "output\bitcoin.conf" -Encoding UTF8
        
        # Create README
        $readmeContent = @"
Krepto Windows GUI Distribution
==============================

This package contains the Krepto cryptocurrency GUI and CLI tools for Windows.

Files included:
- krepto-qt.exe     : Graphical user interface (Bitcoin Qt GUI)
- kryptod.exe       : Daemon/server
- krepto-cli.exe    : Command line interface
- krepto-tx.exe     : Transaction utility
- krepto-util.exe   : General utility
- krepto-wallet.exe : Wallet utility
- Qt5*.dll          : Qt5 GUI libraries
- platforms/        : Qt5 platform plugins
- *.dll             : Visual C++ runtime libraries
- bitcoin.conf      : Configuration file

Quick Start:
1. Double-click krepto-qt.exe to start the GUI
2. The application will automatically connect to the Krepto network
3. Use Tools -> Mining Console to start mining

Network Information:
- Main network port: 12345
- RPC port: 12347
- Seed nodes: 164.68.117.90:12345, 5.189.133.204:12345
- Data directory: %APPDATA%\Krepto\

System Requirements:
- Windows 10 or later (64-bit)
- 4GB RAM minimum
- 10GB free disk space

For more information, visit: https://krepto.org
Built with Bitcoin Core Qt GUI technology.
Built on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
"@
        $readmeContent | Out-File -FilePath "output\README.txt" -Encoding UTF8
        
        # Create batch file
        $batchContent = @"
@echo off
echo Starting Krepto GUI...
echo.
echo Network: Krepto Mainnet
echo Port: 12345
echo.
krepto-qt.exe
pause
"@
        $batchContent | Out-File -FilePath "output\Start-Krepto-GUI.bat" -Encoding ASCII
        
        Write-Host "✅ Packaging completed"
      shell: powershell
    
    - name: Create ZIP package
      run: |
        Compress-Archive -Path "output\*" -DestinationPath "Krepto-Windows-GUI-${{ github.event.inputs.version || 'latest' }}.zip"
        
        # Calculate checksums
        $zipFile = "Krepto-Windows-GUI-${{ github.event.inputs.version || 'latest' }}.zip"
        $zipInfo = Get-Item $zipFile
        $zipSize = [math]::Round($zipInfo.Length / 1MB, 2)
        $zipHash = Get-FileHash $zipFile -Algorithm SHA256
        
        Write-Host "Package: $zipFile"
        Write-Host "Size: $zipSize MB"
        Write-Host "SHA256: $($zipHash.Hash)"
        
        # Save info for release
        $buildInfo = @"
        Package: $zipFile
        Size: $zipSize MB
        SHA256: $($zipHash.Hash)
        Built: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        "@
        $buildInfo | Out-File -FilePath "build-info.txt" -Encoding UTF8
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: krepto-windows-gui-${{ github.event.inputs.version || 'latest' }}
        path: |
          Krepto-Windows-GUI-*.zip
          build-info.txt
        retention-days: 30
    
    - name: Create Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Krepto-Windows-GUI-*.zip
          build-info.txt
        body: |
          ## Krepto Windows GUI Release
          
          This release contains the Windows GUI version of Krepto cryptocurrency.
          
          ### Files
          - `krepto-qt.exe` - Main GUI application (Bitcoin Qt GUI)
          - `kryptod.exe` - Daemon/server
          - `krepto-cli.exe` - Command line interface
          - Additional utilities and dependencies
          
          ### Quick Start
          1. Download and extract the ZIP file
          2. Double-click `krepto-qt.exe` to start
          3. Use Tools → Mining Console to start mining
          
          ### Network
          - Port: 12345
          - RPC Port: 12347
          - Seed Nodes: 164.68.117.90:12345, 5.189.133.204:12345
          
          Built with Bitcoin Core Qt GUI technology.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 